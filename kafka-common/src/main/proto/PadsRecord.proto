syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.prateek.common.message.protobuf";
import "google/protobuf/timestamp.proto";

message KeyValue {
  string key = 1;
  string value = 2;
}

message UsedCounterDetails {
  string countertypename = 1;
  string countertypeproductname = 2;
  string value = 3;
}

message PadsRecord {

  enum Quotaunit {
    BYTES = 0;
    EVENTS = 1;
    MILLISECONDS = 2;
  }

  enum Terminationreason {
    REASON_UNSPECIFIED = 0;
    NORMAL_COMMIT = 1;
    PARTIAL_COMMIT = 2;
    NETWORK_DISCONNECT = 3;
    LOW_BALANCE = 4;
    RESERVATION_REASON_UNKNOWN = 5;
    NOT_USED = 6;
    USAGE_LIMIT = 7;
  }

  enum Calltype {
    ORIGINATING_VOICE = 0;
    TERMINATING_VOICE = 1;
    FORWARDED_VOICE = 2;
    ORIGINATING_DATA = 3;
    TERMINATING_DATA = 4;
    FORWARDED_DATA = 5;
    ORIGINATING_SHORT_MESSAGE = 6;
    TERMINATING_SHORT_MESSAGE = 7;
    ORIGINATING_FAX = 8;
    TERMINATING_FAX = 9;
    FORWARDED_FAX = 10;
    GPRS = 11;
    ORIGINATING_MULTIMEDIA_MESSAGE = 12;
    TERMINATING_MULTIMEDIA_MESSAGE = 13;
    ORIGINATING_COLLECT = 14;
    TERMINATING_COLLECT = 15;
    PADS = 16;
  }


  string internalreferenceid = 1;
  string firstreferenceid = 2;
  uint64 seqno = 3;
  bool unconditionallycharged = 4;
  string ano = 5;
  string imsi = 6;
  string subscriptionnum = 7;
  string mainphoneno = 8;
  string mainimsi = 9;
  string imei = 10;
  fixed32 subscriberip = 11;
  bytes subscriberipv6 = 12;
  string ggsnchargingid = 13;
  bytes sgsnaddress = 14;
  bytes mobileCountryCode = 15;
  bytes mobileNetworkCode = 16;
  bytes locationAreaCode = 17;
  bytes cellIdentity = 18;
  bytes routingAreaCode = 19;
  bytes serviceAreaCode = 20;
  bytes trackingAreaCode = 21;
  bytes eUtranCellIdentifier = 22;
  string apn = 23;
  string serviceid = 24;
  Calltype calltype = 25;
  google.protobuf.Timestamp creationtime = 26;
  google.protobuf.Timestamp starttime = 27;
  google.protobuf.Timestamp localstarttime = 28;
  uint64 duration = 29;
  uint64 datavolumesent = 30;
  uint64 datavolumereceived = 31;
  uint64 usedquota = 32;
  uint64 chargedquota = 33;
  Quotaunit quotaunit = 34;
  string rateplanid = 35;
  string rateplanname = 36;
  uint64 deviations = 37;
  string accountnum = 38;
  float cost = 39;
  float taxamount = 40;
  string taxuuid = 41;
  string taxname = 42;
  string currency = 43;
  string cappingcountertypeid = 44;
  string cappingcountertypename = 45;
  string cappingcountertypeproductname = 46;
  Terminationreason terminationreason = 47;
  string origzone = 48;
  string tariff = 49;
  string subscriptiontypeid = 50;
  string subscriptiontypename = 51;
  bool home = 52;
  string accounttypeid = 53;
  string accounttypename = 54;
  repeated string additionalinfo = 55;
  string timezoneid = 56;
  float postbalance = 57;
  float usedcountervaluesamount = 58;
  float usedcountervaluestime = 59;
  float usedcountervaluesdatavolume = 60;
  uint32 usedcountervaluesinteger = 61;
  repeated UsedCounterDetails usedcounterdetails = 62;
  string delegatingcounterid = 63;
  repeated KeyValue subscriptionproperty = 64;
  repeated KeyValue recordtags = 65;
  string discountplanid = 66;
  string discountplanname = 67;
  float discount = 68;
}

message PadsResponce{
  string responce = 1;
}

service PadsRecordService {
  rpc sendRequest(PadsRecord) returns (PadsResponce);
}
